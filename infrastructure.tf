terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region  = var.region
  profile = var.aws_profile # uses profile generated by `aws config --profile <your-profile-name>`
}

resource "tls_private_key" "pk" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "kp" {
  key_name   = var.keypair_name
  public_key = tls_private_key.pk.public_key_openssh

  # store the generated key locally
  provisioner "local-exec" {
    command = "echo '${tls_private_key.pk.private_key_pem}' > ./${var.keypair_filename}"
  }
}

resource "aws_vpc" "my_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true

  tags = {
    Name = var.vpc_name
  }
}

resource "aws_subnet" "availability_zone_1" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = var.availability_zone_1_cidr
  availability_zone = var.availability_zone_1

  tags = {
    Name = "Public Subnet ${var.availability_zone_1}"
  }
}

resource "aws_subnet" "availability_zone_2" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = var.availability_zone_2_cidr
  availability_zone = var.availability_zone_2

  tags = {
    Name = "Public Subnet ${var.availability_zone_2}"
  }
}

resource "aws_internet_gateway" "my_vpc_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "VPC - Internet Gateway"
  }
}

resource "aws_route_table" "my_vpc_public" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_vpc_igw.id
  }

  tags = {
    Name = "Public Subnets Route Table for VPC"
  }
}

resource "aws_route_table_association" "availablity_zone_1_public" {
  subnet_id      = aws_subnet.availability_zone_1.id
  route_table_id = aws_route_table.my_vpc_public.id
}

resource "aws_route_table_association" "availablity_zone_2_public" {
  subnet_id      = aws_subnet.availability_zone_2.id
  route_table_id = aws_route_table.my_vpc_public.id
}

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound connections"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Allow SSH Security Group"
  }
}

resource "aws_security_group" "allow_8080_from_elb" {
  name        = "allow_8080_from_elb"
  description = "Allow 8080 from ELB"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port       = 8080
    to_port         = 8080
    protocol        = "tcp"
    security_groups = [aws_security_group.elb_https.id]
  }

  tags = {
    Name = "Allow 8080 from ELB"
  }
}

resource "aws_acm_certificate" "cert" {
  domain_name       = var.cert_domain
  validation_method = "DNS"
}

data "aws_route53_zone" "domain" {
  name = var.domain
}

resource "aws_route53_record" "domain-validation" {
  for_each = {
    for dvo in aws_acm_certificate.cert.domain_validation_options : dvo.domain_name => {
      name   = dvo.resource_record_name
      record = dvo.resource_record_value
      type   = dvo.resource_record_type
    }
  }

  allow_overwrite = true
  name            = each.value.name
  records         = [each.value.record]
  ttl             = 60
  type            = each.value.type
  zone_id         = data.aws_route53_zone.domain.zone_id
}

resource "aws_route53_record" "www-domain-com" {
  zone_id = data.aws_route53_zone.domain.zone_id
  name    = "www.${var.domain}"
  type    = "A"
  alias {
    name                   = aws_elb.elb_web.dns_name
    zone_id                = aws_elb.elb_web.zone_id
    evaluate_target_health = true
  }
}

resource "aws_route53_record" "domain-com" {
  zone_id = data.aws_route53_zone.domain.zone_id
  name    = var.domain
  type    = "A"
  alias {
    name                   = aws_elb.elb_web.dns_name
    zone_id                = aws_elb.elb_web.zone_id
    evaluate_target_health = true
  }
}

data "aws_elb_hosted_zone_id" "domain" {}

resource "aws_acm_certificate_validation" "domain" {
  certificate_arn         = aws_acm_certificate.cert.arn
  validation_record_fqdns = [for record in aws_route53_record.domain-validation : record.fqdn]
}

resource "aws_launch_configuration" "web" {
  name_prefix = "web-"

  image_id      = "ami-0947d2ba12ee1ff75" # Amazon Linux 2 AMI (HVM), SSD Volume Type
  instance_type = "t2.micro"
  key_name      = var.keypair_name

  security_groups             = [aws_security_group.allow_8080_from_elb.id, aws_security_group.allow_ssh.id]
  associate_public_ip_address = true

  user_data = <<USER_DATA
#!/bin/bash
sudo yum update -y
sudo amazon-linux-extras install nginx1 -y
sudo echo "$(curl http://169.254.169.254/latest/meta-data/local-ipv4) && echo "$(hostname)" > /usr/share/nginx/html/index.html
sudo sed -i 's/80/8080/g' /etc/nginx/nginx.conf
sudo chkconfig nginx on
sudo service nginx start
  USER_DATA

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_security_group" "elb_https" {
  name        = "elb_https"
  description = "Allow HTTP traffic to instances through Elastic Load Balancer"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Allow HTTP through ELB Security Group"
  }
}

resource "aws_elb" "elb_web" {
  name = "web-elb"
  security_groups = [
    aws_security_group.elb_https.id
  ]
  subnets = [
    aws_subnet.availability_zone_1.id,
    aws_subnet.availability_zone_2.id
  ]

  cross_zone_load_balancing = true

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    interval            = 30
    target              = "HTTP:8080/"
  }

  listener {
    # lb_port = 80
    # lb_protocol = "http"

    # For use with SSL certificates
    lb_port            = 443
    lb_protocol        = "https"
    ssl_certificate_id = aws_acm_certificate.cert.arn

    # Forward ELB:443 ==> EC2:8080
    instance_port     = "8080"
    instance_protocol = "http"
  }
}

resource "aws_autoscaling_group" "web" {
  name = "${aws_launch_configuration.web.name}-asg"

  min_size         = 1
  desired_capacity = 2
  max_size         = 4

  health_check_type = "ELB"
  load_balancers = [
    aws_elb.elb_web.id
  ]

  launch_configuration = aws_launch_configuration.web.name

  enabled_metrics = [
    "GroupMinSize",
    "GroupMaxSize",
    "GroupDesiredCapacity",
    "GroupInServiceInstances",
    "GroupTotalInstances"
  ]

  metrics_granularity = "1Minute"

  vpc_zone_identifier = [
    aws_subnet.availability_zone_1.id,
    aws_subnet.availability_zone_2.id
  ]

  # Required to redeploy without an outage.
  lifecycle {
    create_before_destroy = true
  }

  tag {
    key                 = "Name"
    value               = "web"
    propagate_at_launch = true
  }

}

resource "aws_autoscaling_policy" "web_policy_up" {
  name                   = "web_policy_up"
  scaling_adjustment     = 1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = aws_autoscaling_group.web.name
}

resource "aws_autoscaling_policy" "web_policy_down" {
  name                   = "web_policy_down"
  scaling_adjustment     = -1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = aws_autoscaling_group.web.name
}

output "elb_dns_name" {
  value = aws_elb.elb_web.dns_name
}
